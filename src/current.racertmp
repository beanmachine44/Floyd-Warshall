struct WeightedEdge {
    start: uint,
    end: uint,
    weight: int
}

enum Distance {
    Length(int),
    Infinity
}

impl Distance {
	// Adds two distances together and returns the sum
	fn add(&self, other:Distance) -> Distance {
		match *self {
			Length(x) => {
				match other {
					Length(y) => Length(x+y),
					Infinity => Infinity
				}
			},
			Infinity => Infinity
		}
	}
}

enum Vertex {
	Vertex(uint),
	Null
}

fn main() {

    // The list of edges of the graph we are testing.
    let edges = vec![
    	WeightedEdge{ start: 1, end: 5, weight: -1},
    	WeightedEdge{ start: 2, end: 1, weight: 1},
    	WeightedEdge{ start: 2, end: 4, weight: 2},
    	WeightedEdge{ start: 3, end: 2, weight: 2},
    	WeightedEdge{ start: 3, end: 6, weight: -8},
    	WeightedEdge{ start: 4, end: 1, weight: -4},
    	WeightedEdge{ start: 4, end: 5, weight: 3},
    	WeightedEdge{ start: 5, end: 2, weight: 7},
    	WeightedEdge{ start: 6, end: 2, weight: 5},
    	WeightedEdge{ start: 6, end: 3, weight: 10}
    ];

    // Initialize the algorithm
    let mut dist = [[Infinity, ..6], ..6];
    let mut pred = [[Null, ..6], ..6];

    // Load the edges into the matricies
    for edge in edges.iter() {
    	dist[edge.start - 1][edge.end - 1] = Length(edge.weight);
    	pred[edge.start - 1][edge.end - 1] = Vertex(edge.start);
    }

    for v in range(0u, 6u) {
    	dist[v][v] = Length(0);
    }

    for k in range(0u, 6u) {
    	// Print out the two matricies
    	for i in range(0u, 6u) {
    		for j in range(0u, 6u) {
    			match dist[i][j] {
    				Length(x) => print!("{}\t", x),
    				Infinity => print!("Ifnt\t")
    			}
    		}

    		for j in range(0u, 6u) {
    			match pred[i][j] {
    				Vertex(x) => print!("{}\t", x),
    				Null => print!("Null\t")
    			}
    		}

    		print!("\n")
    	}
    	print!("\n\n")
    	
    	for i in range(0u, 6u) {
    		for j in range(0u, 6u) {
    			dist[i][j] = match dist[i][k].add(dist[k][j]) {
    				Length(x) => {
    					match dist[i][j] {
    						Length(y) => {
    							if x < y {
    								pred[i][j] = pred[k][j];
    								Length(x)
    							} else {
    								dist[i][j]
    							}
    						},
    						Infinity => {
								pred[i][j] = pred[k][j];
								Length(x)
							}
    					}
    				},
    				Infinity => dist[i][j]
    			};
    		}
    	}
    }

	// Print out the two matricies
	for i in range(0u, 6u) {
		for j in range(0u, 6u) {
			match dist[i][j] {
				Length(x) => print!("\t{}", x),
				Infinity => print!("\tIfnt")
			}
		}

		for j in range(0u, 6u) {
			match pred[i][j] {
				Vertex(x) => print!("\t{}", x),
				Null => print!("\tNull")
			}
		}

		print!("\n")
	}
	print!("\n\n")
}
